[{"content":"\r数组 二分查找 1.https://leetcode.cn/problems/binary-search/description/ 用时：4.33 解题思路：数组有序 返回下标（查找元素）\u0026ndash;\u0026gt; 二分法 这里采用左闭右闭区间[low,high]所以while判断的时候是low \u0026lt;= high\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 int low = 0; int high = nums.length - 1; int mid = (low + high)/2; // int mid = low + （high - low）/ 2；防止溢出 while(low \u0026lt;= high){ if(nums[mid] == target){ return mid; }else if(nums[mid] \u0026gt; target){ high = mid - 1; class Solution { public int searc mid = (low + high)/2; }else{ low = mid + 1; mid = (low + high)/2; } } return -1; } } 2.https://leetcode.cn/problems/search-insert-position/description/ 用时：15.54 犯的问题：粗心把high初始化的时候设置成nums.length了，2，3，4情况返回值应该是high+1（要想明白为什么是high+1）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Solution { public int searchInsert(int[] nums, int target) { // 可能出现的情况四种1.找到nums[mid] = target // 2.没出现 目标值在最前面 // 3.没出现 目标值在最后面 // 4.没出现 目标值在某个区间 // 2 3 4 要保证统一返回 int low = 0; int high = nums.length - 1; int mid = (high + low)/2; while(low \u0026lt;= high){ if(nums[mid] == target){ return mid; }else if(nums[mid] \u0026gt; target){ high = mid - 1; mid = (high + low)/2; }else{ low = mid + 1; mid = (high + low)/2; } } return high + 1; } } 3.https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/ 没思路\n移除元素 1.https://leetcode.cn/problems/remove-element/description/ 思路：我一想到双指针脑子里面总是会想让i指向0，j指向i+1或者就是i指向0，j指向length-1.实际上的情况比这更复杂，不能用这种惯性思维来做题。（这道题是看了代码随想录的演示动画自己写的while循环 其实for循环比这个简单）\n首先确定指针表示的含义 i是指向新的子数组的下标，新数组中不允许有val j是用于找到非val值用于交换的元素 初始化：i=j=0 在循环中i和j的变化分情况讨论 nums[i]！=val时 不需要交换 只需要i和j同时向后移动即可 nums[i]==val时 分两种情况 nums[j]==val时，需要让j自己移动到不为val的地方，变成nums[j]!=val的情况 然后进行交换 交换后i和j再同时移动 循环终止条件：当j到达length - 1 的时候循环终止\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Solution { public int removeElement(int[] nums, int val) { // i指针指向的数组中不允许有val j指针用于找到非val的元素 // 指针初始化位置 i=j=0 int i = 0; int j = 0; while(j \u0026lt;= nums.length - 1){ if(nums[i]==val){ if(nums[j]!=val){ int temp = nums[i]; nums[i] = nums[j]; nums[j] = temp; i++; j++; }else{ j++; } }else{ i++; j++; } } return i; } } 2.https://leetcode.cn/problems/remove-duplicates-from-sorted-array/description/\n","date":"2025-10-17T00:00:00Z","permalink":"https://1parado.github.io/p/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/","title":"代码随想录"},{"content":"\rRuoYi-Vue-Pro: https://doc.iocoder.cn/quick-start/\n后端版本:我下载的mini版本的，只有一些简单的功能，其中的一些功能是受限的 https://github.com/YunaiV/ruoyi-vue-pro\n前端版本：Vue3 + element-plus 版本 https://github.com/yudaocode/yudao-ui-admin-vue3/\n按照RuoYi配置文档一步一步来其实挺好搭建的，主要是要先配置环境。\n","date":"2025-10-16T00:00:00Z","permalink":"https://1parado.github.io/p/ruoyi%E6%A1%86%E6%9E%B6/","title":"RuoYi框架"},{"content":"\r⚫ 找论文的一些网站（有些网站要翻墙） Google scholar⭐⭐⭐⭐⭐： 可以配合谷歌插件Easy scholar直接显示期刊的等级和影响因子 2.Web of science⭐⭐⭐\n3.Sciencedirect⭐⭐⭐\n4.Ieeexplore⭐⭐⭐\n5.Arxiv⭐⭐预印的期刊，文章比较新但可能有小错误\n6.CNKI 中文知网⭐⭐\n⚫ 文献管理工具： Zotero + 翻译插件: https://blog.csdn.net/xiaoningaijishu/article/details/151042814\nIma腾讯推出的个人知识库（英文不好的强烈推荐！）把论文上传到知识库中，然后全局翻译，翻译的很准确，而且可以根据知识库进行提问。\n小绿鲸（我没用过，看师兄用过）: https://www.xljsci.com/\n⚫ 笔记软件： Notion，Obsidian，Ima，Typora, Cherry studio\u0026hellip;推荐Obisidian 轻量化（但其实没有做笔记的习惯的话不下载也可以）\n⚫ 用于论文写作的一些工具 overleaf是一款在线编写latex格式的论文写作软件，可以配合浏览器插件Grammarly检查语法错误 https://app.grammarly.com/\noverleaf模板: https://cn.overleaf.com/latex/templates 点 Journal Article 找对应的论文模板格式下载压缩包 导入到overleaf即可编写操作\n习惯用Vs code的可以在vscode中下载overleaf的插件 直接在vscode中编写也可:https://zhuanlan.zhihu.com/p/29808221714\n⚫ 好用的网站： 表转latex格式 https://tablesgenerator.com/\nlatex公式在线编写： https://www.latexlive.com/home\nCanva做汇报ppt: https://www.canva.cn/\nBoardmix做思维导图: https://boardmix.cn/app/home\nProcesson做流程图: https://www.processon.com/\nVison也可以画流程图，可以导出矢量图.svg格式，适合放在文章里面做流程图:https://blog.csdn.net/laowangpython/article/details/147465427\n⚫ AI工具： 我常用的ai就是下面这些，主推GPT和Grok，其他的可以在论文写作的时候，优化论文表达的时候用。【小技巧：可以自己写中文初稿，然后让gpt翻译成英文，再截图让gpt生成latex格式，直接复制到overleaf里即可，英文好的话直接用英文写也可以】\n1.chatgpt: https://chatgpt.com/\n2.grok: https://grok.com/\n3.kimi: https://www.kimi.com/\n4.deepseek: https://chat.deepseek.com/\n每个课题组的研究方向不一样，发论文的难度也不一样，下面只是我的研究过程： 先确定研究方向，然后读最新的几篇综述（最好选英文文献，中文也可以），然后找一篇感觉能复现出来的文章进行复现（可以发邮件给作者看看能不能要到源码，最好多问几个，真的有人愿意给的/用AI帮忙），然后在该文章的基础上想一下有没有可以新增的点（看论文的未来展望/和其他论文模型进行融合），一篇好的论文需要天时地利人和，EI会议随便写，好多都是论文A的模块 + 论文B的模块整合到一起得到自己的创新模型。\n以我们组的研究方向为例：网络弹性量化（Cyber resilience quantification），在文献搜索网站上面搜关键词，然后读几篇综述，大致了解一下网络弹性评估包括车联网，信息关键基础设施网络，电网，无人机集群网络\u0026hellip;.本来是研究车联网的，然后组会汇报两次无人机相关文章，莫名其妙研究方向变成无人机了，也算找到了研究领域:无人机集群网络弹性评估。然后读无人机集群网络弹性评估的文章，暑假开始，老师让复现文章，刚开始一直没复现出来，联系好多文章作者要源码，最后有一个学长给了我他的部分代码，然后复现他的这篇文章，在他的文章基础上加了一些模块解决了一些现有研究领域没有解决的问题。（文章还没发，不敢把论文放网上）满打满算两个多月写一篇EI是够用的。\n","date":"2025-10-16T00:00:00Z","permalink":"https://1parado.github.io/p/%E7%A7%91%E7%A0%94%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C/","title":"科研论文写作"},{"content":"\r参考链接：https://javaguide.cn/database/mysql/mysql-questions-01.html\n📚 数据库基础 ER图 提供实体（方块） 属性（椭圆）和联系（菱形）的方法 关系：1对1，1对多，多对多\u0026hellip; 在创建项目之前应该先构建好数据库 并且绘制ER图来理清数据之间的关系。\n数据库范式：1NF（属性不可再分）,2NF（在 1NF 的基础之上，消除了非主属性对于码的部分函数依赖）,3NF（在 2NF 的基础之上，消除了非主属性对于码的传递函数依赖），BCNF（在3NF的基础上 去除属性见不必要的函数依赖）\n主键：唯一标识一个元组（行）不重复不为空，一个表只有一个主键\n外键：与其他表建立联系 外键是另外一个表的主键 可以重复可以为空 一个表可以有多个外键\n一般不推荐外键：1.增加了复杂性 2.增加了维护外键的工作量 3.对数据库分表不友好\n外键的好处：1.保证数据一致性和完整性 2.级联操作简单\ndrop 删除表结构 turncate 清空表数据 delete使用where限定删除某一行数据/清空表数据\n执行速度drop\u0026gt; turncate \u0026gt;delete\n数据库设计：需求分析-ER图-ER图转为表-选取数据库和存储结构-编程测试试和运行-运行和维护\n关系型数据库:如 mysql 支持事务的四大属性：ACID属性（原子性，一致性，隔离性，持久性）\n非关系型数据库: 如redis 天生支持分布式，数据冗余和数据分片等特性，旨在提供可扩展的高可用高性能数据存储解决方案。非关系型数据库比较灵活，性能高，可扩展性强\n字符集：GBK,ASCII,UTF8\u0026hellip; MySQL8.0默认字符集utf8mb4\nDDL数据定义语言: 定义数据库对象 CREATE、ALTER、DROP\nDML数据操纵语言 : 访问数据，因此其语法都是以读写数据库为主 CRUD\nDCL数据控制语言 : 控制用户的访问权限 授予权限GRANT、收回权限REVOKE\nTCL事务控制语言：管理数据库中的事务 , 提交事务commit 回滚事务 rollback\n索引⭐【面试被问到了】\n索引是一种用于快速查询和检索数据的数据结构，其本质可以看成是一种排序好的数据结构\n分为：唯一索引 主键索引 聚集索引 哈希索引\nhttps://javaguide.cn/database/mysql/mysql-index.html\nsql（结构化查询语言） 语法常见面试总结可以去牛客上看 也可以刷力扣上的sql 题 这里我就不着重看了 之后刷sql题的时候再看\n容易混淆的点：\nDecimal 可以存精确的小数 Float / Double 只能存近似的小数 DateTime 没有时区信息 八字节存储 TimeStamp 和时区有关 四字节存储 Null 1.null表示缺失的值 2.任何值与null比较结果都是null 3.有些聚合函数忽略null “ ” 1.空字符串 2.“ ” 可以进行比较，如 “ ” = “ ”结果为true 3. 聚合函数不忽略 MySQL执行流程：\n连接器（进行身份验证） 分析器（进行词法分析 和 语法分析） 优化器（按照MySQL认为最优的方案执行） 执行器（执行语句 从存储引擎返回数据） **存储引擎⭐（InnoDB、MyISAM、Memory 等多种存储引擎。InnoDB 是 MySQL 的默认存储引擎，只有InnoDB支持事务） 存储引擎采用插件式架构 ，基于表结构而不是数据库\nMySQL 日志⭐\n常见的日志分类:错误日志，查询日志，慢查询日志（可以结合 EXPLAIN 分析查询执行计划，优化索引或 SQL 结构，可用于性能优化），二进制日志（主从复制），回滚日志，重做日志（保证事务的持久性）\u0026hellip;\nMySQL事务：逻辑上的一组操作要么都执行要么都不执行。事务分为扁平事务（最简单的情况），嵌套事务，分布式事务\u0026hellip; 事务的四大属性ACID. 事务的目的就是为了保证数据的一致性。\n并发事务带来的问题：脏读，不可重复读，幻读，丢失修改（四种问题基本概念是什么？如何解决？）\n并发事务的控制方式：\n锁，通过读写锁来显式控制共享资源 分为表级锁（对整表加的锁）和行级锁（对索引字段加的锁），MyISAM 仅仅支持表级锁，InnoDB两者均支持。无论是表级锁和行级锁都存在共享锁S和排他锁X。意向锁可以来快速判断是否可以对某个表使用表锁，从而有了意向共享锁IS和意向排他锁IX MVCC（多版本并发控制）即对一份数据会存储多个版本，通过事务的可见性来保证事务能看到自己应该看到的版本。 事务隔离级别（级别越高，数据一致性越好，但并发性能可能越低）：1.读未提交 2.读已提交 3.可重复读（MySQL默认的隔离级别） 4.可串行化。 MySQL 的隔离级别基于锁和 MVCC 机制共同实现的\n当前读和快照读\n当前读 = 当前最新数据 + 会加锁 → “最新、可能被阻塞”\n快照读 = 事务快照 + 不加锁 → “旧版本、不会被阻塞”\nMySQL调优⭐\nhttps://javaguide.cn/database/mysql/mysql-high-performance-optimization-specification-recommendations.html\nMySQL可以存文件（文件转为二进制文件存入MySQL），但是影响数据库性能占用太多存储空间。可以用云服务厂商提供的对象存储如OSS\u0026hellip;也可以用MinIO开源项目实习分布式文件服务。\nhttps://www.51cto.com/article/716978.html\nMySQL性能优化：慢查询日志找 SQL → Explain 看执行计划（分析性能） → 索引优化/表结构优化\u0026hellip; → 锁和 IO 分析 → SQL 重写 → 测试验证\n读写分离：读写分离主要是为了将对数据库的读写操作分散到不同的数据库节点上。 这样的话，就能够小幅提升写性能，大幅提升读性能。\n如何实现：主数据库和从数据库数据实时同步（主从复制），写请求交给主数据库处理，读数据库交给从数据库处理。\n主从复制：主数据库的数据变化写入二进制日志，从库链接主库，主库创建I/O线程发送二进制日志给从库，从库将二进制日志写入中继日志（Relay log）然后从库的sql线程读取中继日志实现主从数据实时同步（可能会发生主从同步延迟）\n第一种实现方式：代理方式\n在应用和数据中间加了一个代理层。应用程序所有的数据请求都交给代理层处理，代理层负责分离读写请求，将它们路由到对应的数据库中。\n第二种实现方式：组件方式\n引入第三方组件来帮助我们读写请求。\n分库分表：如果一张表的存储数据量太大就要分库分表。分库分为水平分库（按照数据划分，行划分）和垂直分库（按照业务划分，属性划分）分表与分库同理。分库分表之后需要解决事务问题，分布式id问题，join操作问题\n冷热数据：热数据是指经常被访问和修改且需要快速访问的数据，冷数据是指不经常访问，对当前项目价值较低，但需要长期保存的数据。可以按照时间和访问频率划分。\n延时双删⭐【面试被问到了】（保证数据一致性）：首先删除redis中的缓存数据，然后更新数据库中的数据，让当前线程休眠一段时间，唤醒之后再次删除redis的缓存数据。\n","date":"2025-10-15T00:00:00Z","permalink":"https://1parado.github.io/p/mysql-%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/","title":"Mysql 常见面试题"},{"content":"\r2025.10.15 这是创建的 思维导图\n","date":"2025-10-15T00:00:00Z","permalink":"https://1parado.github.io/p/%E4%BB%BF%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F/","title":"仿教务系统"},{"content":"\r记录一下创建个人博客的过程。欢迎阅读！\n用到的工具：Github Page + Hugo\n参考链接： https://bright9911.github.io/\n","date":"2025-10-14T00:00:00Z","permalink":"https://1parado.github.io/p/github-page--hugo-%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%93%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","title":"GitHub page + hugo 搭建一个专属于自己的个人博客"}]