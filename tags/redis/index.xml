<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Redis on Paradox’s Blog</title>
        <link>https://1parado.github.io/tags/redis/</link>
        <description>Recent content in Redis on Paradox’s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>Paradox29</copyright>
        <lastBuildDate>Wed, 22 Oct 2025 16:49:05 +0800</lastBuildDate><atom:link href="https://1parado.github.io/tags/redis/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Redis 常见面试题</title>
        <link>https://1parado.github.io/p/redis-%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
        <pubDate>Sun, 19 Oct 2025 00:00:00 +0000</pubDate>
        
        <guid>https://1parado.github.io/p/redis-%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
        <description>&lt;style&gt;
  body {
    background: url(&#39;/img/background.jpg&#39;) no-repeat center top;
    background-size: cover;
    background-attachment: fixed;
  }
&lt;/style&gt;
&lt;p&gt;参考链接：
&lt;a class=&#34;link&#34; href=&#34;https://javaguide.cn/database/redis/redis-questions-01.html#%E4%BB%80%E4%B9%88%E6%98%AF-redis&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://javaguide.cn/database/redis/redis-questions-01.html#%E4%BB%80%E4%B9%88%E6%98%AF-redis&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Redis是NoSQL数据库，是一种内存数据库。读写速度很快，经常用于分布式缓存方向，存储的是key-value对数据。Redis支持事务，持久化，lua脚本&amp;hellip;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可以试一下&lt;a class=&#34;link&#34; href=&#34;https://onecompiler.com/redis&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;在线编译器&lt;/a&gt;写一下redis命令 简单易上手 easy~&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Redis为什么速度快：1.纯内存操作（纳秒级），传统的数据库需要读写磁盘（毫秒级） 2.高效的I/O模型。3.优化的内部数据结构4.简洁高效的通信协议（RESP）. redis适合做缓存不适合做主数据库，因为内存成本高，且redis虽然支持数据持久化但是有数据丢失风险。
其他的分布式缓存：Tendis,KeyDB&amp;hellip;&lt;/p&gt;
&lt;p&gt;选择Redis的原因：1.访问速度快（基于内存） 2.高并发 3. 功能全面（可以作缓存，可以用于分布式锁，限流，消息队列，延时队列&amp;hellip;）&lt;/p&gt;
&lt;p&gt;常见的缓存读写策略：https://javaguide.cn/database/redis/3-commonly-used-cache-read-and-write-strategies.html&lt;/p&gt;
&lt;p&gt;Redis 应用【2025.10.20】&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;缓存&lt;/li&gt;
&lt;li&gt;分布式锁 Redission&lt;/li&gt;
&lt;li&gt;做限流工具 Redis+LUA脚本 RRateLimiter实现分布式限流即基于Lua脚本+令牌桶算法&lt;/li&gt;
&lt;li&gt;做消息队列 Redis的Stream类型的数据结构更适合做消息队列（但一般用中间件）&lt;/li&gt;
&lt;li&gt;做延时队列 内置了延时队列 基于Sorted Set实现&lt;/li&gt;
&lt;li&gt;分布式session 利用String或Hash数据结构存储session数据&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Redis可以实现全文搜索引擎功能 需要借助RedisSearch（一个基于Redis的搜索引擎模块）：性能更优秀 较低内存占用实现快速索引。&lt;/p&gt;
&lt;p&gt;延时任务（红包过期自动退还）:实现方式：1. redis过期事件监听（不推荐） 2. redission内置的延时队列 减少了丢消息的可能，消息不存在重复消费问题&lt;/p&gt;
&lt;p&gt;redis常见的数据类型：String、List、Set、ZSet、Hash&lt;/p&gt;
</description>
        </item>
        <item>
        <title>仿教务系统</title>
        <link>https://1parado.github.io/p/%E4%BB%BF%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F/</link>
        <pubDate>Wed, 15 Oct 2025 00:00:00 +0000</pubDate>
        
        <guid>https://1parado.github.io/p/%E4%BB%BF%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F/</guid>
        <description>&lt;style&gt;
  body {
    background: url(&#39;/img/background.jpg&#39;) no-repeat center top;
    background-size: cover;
    background-attachment: fixed;
  }
&lt;/style&gt;
&lt;p&gt;2025.10.15
这是创建的
&lt;a class=&#34;link&#34; href=&#34;https://github.com/1parado/1parado_repo.github.io/blob/main/%E4%BB%BF%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;思维导图&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;2025.10.21&lt;/p&gt;
&lt;h2 id=&#34;登录模块&#34;&gt;登录模块
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;登录鉴权&lt;/strong&gt; ：该项目采用SpringAOP + 自定义注解@RoleRequire实现RBAC鉴权&lt;/p&gt;
&lt;p&gt;现有的登录鉴权方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;SpringSecurity&lt;/strong&gt;+RBAC模型+JWT实现认证与授权&lt;/li&gt;
&lt;li&gt;SpringBoot + &lt;strong&gt;Sa-Token&lt;/strong&gt; + MyBatis + MySQL + Redis 实现用户鉴权、角色管理、权限管理&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Apache Shiro&lt;/strong&gt; 是一个轻量级的安全框架，适合需要简单易用的权限管理的项目&lt;/li&gt;
&lt;li&gt;自定义 定义用户、角色、权限三张表，设计合理的关联关系， 使用拦截器或 AOP 实现权限校验逻辑。根据业务需求设计动态权限分配机制。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;JWT实现无状态认证&lt;/strong&gt;（不需要服务器存储用户的会话状态），一个JWT包括头部，载荷，签名。&lt;/p&gt;
&lt;p&gt;过程：用户登录认证时，服务端验证用户身份，成功的话，服务端生成JWT返回给客户端，客户端在之后的请求中将JWT放在请求的头部（Authorization）,然后服务端通过解析JWT从而确定用户的身份和权限&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;双token机制实现无感刷新&lt;/strong&gt;：分为两种token 一种是access token（访问令牌）短期有效 ，一种是 refresh token（刷新令牌），长期有效。&lt;/p&gt;
&lt;p&gt;过程：客户端登录，认证成功，服务端签发access_token（返回给前端）和refresh token（存入cookie） 之后，客户端访问接口都带着access_token 当access_token过期之后 客户端发送给refresh token给服务端 验证通过则生成新的access token和refresh token，从而实现无感刷新&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://juejin.cn/post/7548268336417751055&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;双 Token 认证机制：从原理到实践的完整实现双 Token 认证机制：从原理到实践的完整实现 在现代 Web 应用中 - 掘金&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;登录模块展示：首先进入登录页面：
&lt;img src=&#34;https://1parado.github.io/img/%e7%99%bb%e5%bd%95%e9%a1%b5%e9%9d%a2.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;登录页面&#34;
	
	
&gt;
然后根据角色的不同，进入不同的主页，系统分为三种角色Admin,Teacher,Student
&lt;img src=&#34;https://1parado.github.io/img/%e7%99%bb%e5%bd%95%e9%89%b4%e6%9d%83.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;登录鉴权&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;秒杀抢课模块&#34;&gt;秒杀抢课模块
&lt;/h2&gt;&lt;p&gt;1.获取动态路径 使用UUID + MD5生成一个唯一标识符 结合前端URL生成动态路径 避免被脚本直接访问&lt;/p&gt;
&lt;p&gt;2.实现限流保护 使用令牌桶实现限流保护（ &lt;strong&gt;Redis + 令牌桶算法&lt;/strong&gt;），这里创建一个工具类TokenBucket，里面的参数包括桶的最大容量，间隔几秒补充几个令牌，当前可用令牌数&amp;hellip;方法包括令牌补充refill和获取令牌逻辑try Acquire 从而实现限流。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;还可以利用redission实现分布式限流 &lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/Mistiest/p/19082141&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;基于 Redisson 的分布式限流实战：令牌桶算法的优雅实现 - 你小志蒸不戳 - 博客园&lt;/a&gt;，比如保护AI访问的API&lt;/p&gt;
&lt;p&gt;其他限流方式：&lt;strong&gt;固定窗口、滑动窗口、漏桶限流和令牌桶限流算法&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;检验动态路径（在获取动态path的时候会将动态path存入Redis，用于此时的动态路径校验）&lt;/li&gt;
&lt;li&gt;检查当前用户是否重复秒杀 (幂等控制) 通过三级缓存实现 本地缓存采用Caffine/Guava 二级缓存采用Redis 三级缓存采用数据库 当发现任意一级的数据库中已经有选课记录了 就返回重复秒杀异常&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;幂等性指的是一个操作，无论执行多少次，都能得到相同的结果，即它不会因为执行多次而影响系统的状态。这在处理网络请求、数据库操作等场景中尤为重要，例如在订单支付、消息推送等操作中，即使因为网络延迟或其他原因导致多次请求，也应保证操作只执行一次，避免重复处理。&lt;/p&gt;&lt;/blockquote&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;
&lt;p&gt;进入秒杀的核心阶段  Redis + Lua脚本 + RocketMQ 实现 库存预减 + 异步入队&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.bytewaver.top/2025/02/14/project/seckill/%e4%bb%8e%e9%9b%b6%e5%bc%80%e5%a7%8b%e5%ae%9e%e7%8e%b0%e7%a7%92%e6%9d%80%e7%b3%bb%e7%bb%9f3/#%e7%a7%92%e6%9d%80%e6%8e%a5%e5%8f%a3%e6%89%a7%e8%a1%8c%e6%b5%81%e7%a8%8b&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;从零开始实现秒杀系统（三）：RocketMQ消息队列篇 - Xun&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Lua脚本进行双重判断，首先判断是否售罄标志，然后再判断库存预减之后的库存数量，并且在脚本中实现库存减1的操作 如果成功返回1 失败返回 0.Lua脚本返回成功，系统发送消息到消息队列（RocketMQ）采用&lt;strong&gt;事务消息机制&lt;/strong&gt;保证数据的最终一致性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;生产者发送半消息 本地事务创建选课记录（订单） 根据事务的执行结果通知Broker是投递该消息还是丢弃该消息  消费者异步从MQ中消费信息 完成后续业务。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://1parado.github.io/img/%e5%bc%82%e6%ad%a5%e7%a7%92%e6%9d%80.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;异步秒杀流程&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;页面展示：
首先填写预选课信息（类似于商城系统的购物车），然后查看选课信息（普通选课和秒杀抢课）
&lt;img src=&#34;https://1parado.github.io/img/%e9%99%90%e6%97%b6%e6%8a%a2%e8%af%be.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;限时抢课&#34;
	
	
&gt;
如果用户是首次抢课且库存充足，则显示抢课成功
&lt;img src=&#34;https://1parado.github.io/img/%e6%8a%a2%e8%af%be%e6%88%90%e5%8a%9f.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;抢课成功&#34;
	
	
&gt;
如果用户重复抢课则提醒请勿重复秒杀
&lt;img src=&#34;https://1parado.github.io/img/%e9%87%8d%e5%a4%8d%e6%8a%a2%e8%af%be%e6%8f%90%e9%86%92.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;重复抢课提醒&#34;
	
	
&gt;
Admin端新增抢课信息
&lt;img src=&#34;https://1parado.github.io/img/%e6%96%b0%e5%a2%9e%e6%8a%a2%e8%af%be%e4%bf%a1%e6%81%af.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;新增抢课&#34;
	
	
&gt;
当学生张三选过课程之后，该课程已经“售罄”了 接下来用李四来选课会提醒库存不足 抢课失败
&lt;img src=&#34;https://1parado.github.io/img/%e6%8a%a2%e8%af%be%e5%a4%b1%e8%b4%a5.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;抢课失败&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;之后可以考虑用jmeter测试高并发场景下的抢课情况。&lt;/p&gt;
&lt;h2 id=&#34;支付模块&#34;&gt;支付模块
&lt;/h2&gt;&lt;p&gt;支付过程：&lt;/p&gt;
&lt;p&gt;用户点击缴费 进入AliPayController 用请求头中的Authorization进行身份验证 用请求体中的PaymentPO来生成缴费信息【前端会收集页面信息 当用户点击缴费按钮就会构建PaymentPO写入请求体中传给后端】
初始化订单信息 订单的状态初始化为0 标识未缴费 每个订单有一个唯一的订单号
使用创建好的支付工具类PayUtil 调用支付宝接口完成支付流程&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PayUtil中的核心方法即发起支付和查询支付结果方法：
&lt;strong&gt;发起支付&lt;/strong&gt;：1.初始化支付宝客户端 2. 创建支付请求 3.设置业务参数 4.发起请求并且返回支付结果
&lt;strong&gt;查询支付结果&lt;/strong&gt;：创建查询请求-执行查询-处理查询结果&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;结果展示：
学生点击缴费之后，跳转到支付页面
&lt;img src=&#34;https://1parado.github.io/img/%e6%94%af%e4%bb%98%e5%8c%85.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;支付宝&#34;
	
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GitHub上面有一些支付服务的项目： &lt;a class=&#34;link&#34; href=&#34;https://github.com/search?q=%E6%94%AF%E4%BB%98&amp;amp;ref=opensearch&amp;amp;type=repositories&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/search?q=%E6%94%AF%E4%BB%98&amp;ref=opensearch&amp;type=repositories&lt;/a&gt; 可以支持支付服务的快速开发。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;ai选课助手模块&#34;&gt;AI选课助手模块
&lt;/h2&gt;&lt;p&gt;chatClient介绍：https://springdoc.cn/spring-ai/api/chatclient.html&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;请求接收与路由&lt;/strong&gt;：用户通过Vue3前端界面提出问题，后端RESTful API接收请求。核心的&lt;strong&gt;智能路由&lt;/strong&gt;逻辑会根据预设关键词（如“选课”、“推荐”、“统计”等）判断问题类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;业务上下文构建&lt;/strong&gt;：对于选课相关问题，系统会调用 CourseSelectionService ，通过 JdbcTemplate 高效查询选课数据库，获取课程热度、名额、个人成绩倾向等&lt;strong&gt;实时统计数据&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Prompt工程与模型调用&lt;/strong&gt;：将查询到的业务数据作为上下文，与预先设计好的&lt;strong&gt;系统Prompt&lt;/strong&gt;（如“你是一名选课顾问…”）进行组装，形成完整的提示信息，然后通过Spring AI调用本地的Ollama (Qwen2:7b)模型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;响应返回&lt;/strong&gt;：模型生成的个性化建议或通用回答最终通过统一的API返回给前端展示。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;我总觉得&lt;strong&gt;代码生成器&lt;/strong&gt;（Mybatis-Plus，RuoYi代码生成器）的实现方式和这也差不多 首先创建模板（这里是提示词）然后查询表结构数据，再进行模板渲染得到生成的代码&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;过程：请求流程：chatClient.call(message) → 调用 OllamaChatClient → 向本地 Ollama 服务发送请求
智能路由：isCourseSelectionQuestion 方法实现业务问题识别，将选课相关问题路由到 BusinessAIService&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;chatClient是SpringAi提供的聊天
页面展示：
&lt;img src=&#34;https://1parado.github.io/img/%e9%80%89%e8%af%be%e5%8a%a9%e6%89%8b.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;选课助手&#34;
	
	
&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;2025.10.22&lt;/p&gt;
&lt;h2 id=&#34;论坛模块&#34;&gt;论坛模块
&lt;/h2&gt;&lt;p&gt;对于论坛模块，学生可以发帖评价课程，教师不能发帖，两者都可以进行评论回复交流
论坛主页展示一些帖子和热门榜单（Redis缓存）【这都是些简单的增删改查】
&lt;img src=&#34;https://1parado.github.io/img/%e8%ae%ba%e5%9d%9b%e4%b8%bb%e9%a1%b5.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;论坛主页&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://1parado.github.io/img/%e5%ad%a6%e7%94%9f%e5%8f%91%e5%b8%96.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;学生发帖&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://1parado.github.io/img/%e8%80%81%e5%b8%88%e4%b8%8d%e8%83%bd%e5%8f%91%e8%b4%b4.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;老师不能发帖&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://1parado.github.io/img/%e8%af%84%e8%ae%ba%e6%a8%a1%e5%9d%97.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;评论模块&#34;
	
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;想到了一个小玩意，在用户进行发布帖子和进行评论的时候，进行敏感词检查。如果内容中包含敏感词 就弹出提示。实现起来挺简单的，让Java后端负责业务逻辑，python负责机器学习，python运行在本地端口，两者通过http进行通信。
详情请看这篇文章 &lt;a class=&#34;link&#34; href=&#34;https://1parado.github.io/p/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E6%95%8F%E6%84%9F%E8%AF%8D%E6%A3%80%E6%B5%8B/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;如何实现一个简单的敏感词检测&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
</description>
        </item>
        
    </channel>
</rss>
