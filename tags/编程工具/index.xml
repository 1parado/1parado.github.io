<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>编程工具 on Paradox’s Blog</title>
        <link>https://1parado.github.io/tags/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/</link>
        <description>Recent content in 编程工具 on Paradox’s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>Paradox29</copyright>
        <lastBuildDate>Sun, 26 Oct 2025 23:21:14 +0800</lastBuildDate><atom:link href="https://1parado.github.io/tags/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>常用工具Git Maven</title>
        <link>https://1parado.github.io/p/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7git-maven/</link>
        <pubDate>Sun, 26 Oct 2025 00:00:00 +0000</pubDate>
        
        <guid>https://1parado.github.io/p/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7git-maven/</guid>
        <description>&lt;h2 id=&#34;2025-10-26&#34;&gt;2025-10-26
&lt;/h2&gt;&lt;h3 id=&#34;maven&#34;&gt;Maven
&lt;/h3&gt;&lt;p&gt;参考：&lt;a class=&#34;link&#34; href=&#34;https://javaguide.cn/tools/maven/maven-core-concepts.html#%E4%BE%9D%E8%B5%96%E9%85%8D%E7%BD%AE&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;maven&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;项目中依赖的第三方库以及插件可统称为&lt;strong&gt;构件&lt;/strong&gt;。每一个构件都可以使用 &lt;strong&gt;Maven 坐标&lt;/strong&gt;唯一标识.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.alibaba&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;easyexcel&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;3.1.1&lt;span class=&#34;nt&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://mvnrepository.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;maven仓库&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果使用 Maven 构建产生的构件（例如 Jar 文件）被其他的项目引用，那么该构件就是其他项目的依赖。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;依赖传递: 遵循路径最短优先 和 声明顺序优先两大原则&lt;/p&gt;
&lt;p&gt;Maven本地仓库${user.home}/.m2/repository
&lt;img src=&#34;https://1parado.github.io/img/maven%e4%bb%93%e5%ba%93.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;maven仓库&#34;
	
	
&gt;
Maven远程仓库 官方维护的Maven仓库&lt;/p&gt;
&lt;p&gt;Maven 的生命周期就是为了对所有的构建过程进行抽象和统一。包含了项目的清理、初始化、编译、测试、打包、集成测试、验证、部署和站点生成等几乎所有构建步骤 分为default clean site&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://maven.apache.org/plugins/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Maven插件&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一个Maven项目中不止有一个pom.xml文件 以此来实现多模块管理 多模块管理的好处：1.降低代码之间的耦合性 2.减少重复，提升复用性；3.每个模块都可以是自解释的；4.模块规范了代码边界的划分。
多模块管理下，会有一个父模块，其他的都是子模块。父模块通常只有一个 pom.xml，没有其他内容。父模块的 pom.xml 一般只定义了各个依赖的版本号、包含哪些子模块以及插件有哪些。&lt;/p&gt;
&lt;h3 id=&#34;git&#34;&gt;Git
&lt;/h3&gt;&lt;p&gt;版本控制：本地版本控制，就是将文件复制一份修改名称。后来发展为集中化的版本控制，类似于主从节点，由主节点保存所有的修订版本，从节点连接到服务器进行拉取或提交。为了解决主节点单点故障的问题，发明了分布式版本控制，Git即分布式版本控制。
客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来。&lt;/p&gt;
&lt;p&gt;Git的三种状态： 已提交commit 已修改 modified 已暂存 staged
Git的三个工作区域：工作目录，暂存区域，Git 仓库目录&lt;/p&gt;
&lt;p&gt;过程：1.在工作目录中修改文件。
2.暂存文件，将文件的快照放入暂存区域。
3.提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。&lt;/p&gt;
&lt;p&gt;Git常用命令：
将GitHub或者Gitee等开源代码托管网站上面的项目拉取下来 只需要创建文件夹 在文件夹下打开cmd输入：
git clone &lt;a class=&#34;link&#34; href=&#34;https://github.com/1parado/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/1parado/&lt;/a&gt;仓库名.git即可
将项目推到GitHub上：
&lt;a class=&#34;link&#34; href=&#34;./img/git%e5%91%bd%e4%bb%a4.png&#34; &gt;git命令&lt;/a&gt;
在编程工具IDEA，VScode等软件中都有版本控制 使用起来很方便，甚至Obsidian，Notion等笔记软件也可以用Git实现版本控制 就很舒服 需要注意的一点就是涉及隐私的文件不要发布在网上 可以在.gitignore声明&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
